package com.akiradunn.oj.leetcode.dp;
//198. 打家劫舍
//你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。
//
//给定一个代表每个房屋存放金额的非负整数数组，计算你 不触动警报装置的情况下 ，一夜之内能够偷窃到的最高金额。
//
// 
//
//示例 1：
//
//输入：[1,2,3,1]
//输出：4
//解释：偷窃 1 号房屋 (金额 = 1) ，然后偷窃 3 号房屋 (金额 = 3)。
//     偷窃到的最高金额 = 1 + 3 = 4 。
//示例 2：
//
//输入：[2,7,9,3,1]
//输出：12
//解释：偷窃 1 号房屋 (金额 = 2), 偷窃 3 号房屋 (金额 = 9)，接着偷窃 5 号房屋 (金额 = 1)。
//     偷窃到的最高金额 = 2 + 9 + 1 = 12 。
// 
//
//提示：
//
//0 <= nums.length <= 100
//0 <= nums[i] <= 400
public class Solution198 {
    class Solution {
        public int rob(int[] nums) {
            if(nums.length == 0){
                return 0;
            }
            if(nums.length == 1){
                return nums[0];
            }
            //定义问题, 数组f的下标范围与数组nums的下标范围不一致, 注意不能光看代码f[i-2] + nums[i-1]不知道什么意思, 其实要先弄懂
            //要写一段代码的目的是为了什么，此时再去看代码才能理解
            //例如f[i]问题的解实际上是以长度为i的最后一个元素被选中时的解，即f[i-2] + nums[i-1]，f[i-2]代表数组nums最后一个元素的倒数第2个(由于不能连续打劫)的解，nums[i-1]就代表数组nums的最后一个元素
            //先了解要用代码做些什么，才能清楚的知道代码要怎么写
            //先有思路，才有实现；————————————先思后实
            int[] f = new int[nums.length+1];
            f[0] = 0;
            f[1] = nums[0];
            f[2] = Math.max(nums[0],nums[1]);
            for(int i=2; i<=nums.length; i++){
                f[i] = Math.max(f[i-1], f[i-2] + nums[i-1]);
            }
            return f[nums.length];
        }
    }
}
