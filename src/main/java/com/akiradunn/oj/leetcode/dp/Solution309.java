package com.akiradunn.oj.leetcode.dp;
//309. 最佳买卖股票时机含冷冻期
//给定一个整数数组，其中第 i 个元素代表了第 i 天的股票价格 。​
//
//设计一个算法计算出最大利润。在满足以下约束条件下，你可以尽可能地完成更多的交易（多次买卖一支股票）:
//
//你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。
//卖出股票后，你无法在第二天买入股票 (即冷冻期为 1 天)。
//示例:
//
//输入: [1,2,3,0,2]
//输出: 3
//解释: 对应的交易状态为: [买入, 卖出, 冷冻期, 买入, 卖出]
//通过次数76,132提交次数132,397
public class Solution309 {
    class Solution {
        public int maxProfit(int[] prices) {
            int n = prices.length;
            if(n == 0) return 0;
            //f[i][0],代表第i天的状态为, 不持有股票(不是由于卖出股票而不持有)
            //f[i][1],代表第i天的状态为, 持有股票
            //f[i][2],代表第i天的状态为, 不持有股票(由于卖出股票而不持有)
            int[][] f = new int[n+1][3];
            f[1][0] = 0;
            f[1][1] = -prices[0];
            f[1][2] = 0;
            for(int i=2; i<=n; i++){
                f[i][0] = Math.max(f[i-1][0], f[i-1][2]);
                //第i天持有股票, 一定不是f[i-1][2]的这种情况, 因为这种情况会有冷冻期, 冷冻期的含义在这里体现
                f[i][1] = Math.max(f[i-1][0]-prices[i-1], f[i-1][1]);
                f[i][2] = f[i-1][1] + prices[i-1];
            }
            return Math.max(f[n][0], Math.max(f[n][1], f[n][2]));
        }
    }
}
